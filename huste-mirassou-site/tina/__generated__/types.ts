//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  categorie: Categorie;
  categorieConnection: CategorieConnection;
  realisation: Realisation;
  realisationConnection: RealisationConnection;
  service: Service;
  serviceConnection: ServiceConnection;
  config: Config;
  configConnection: ConfigConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategorieArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategorieConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategorieFilter>;
};


export type QueryRealisationArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryRealisationConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RealisationFilter>;
};


export type QueryServiceArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServiceConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServiceFilter>;
};


export type QueryConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConfigFilter>;
};

export type DocumentFilter = {
  categorie?: InputMaybe<CategorieFilter>;
  realisation?: InputMaybe<RealisationFilter>;
  service?: InputMaybe<ServiceFilter>;
  config?: InputMaybe<ConfigFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Categorie | Realisation | Service | Config | Folder;

export type Categorie = Node & Document & {
  __typename?: 'Categorie';
  label: Scalars['String']['output'];
  value: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type CategorieFilter = {
  label?: InputMaybe<StringFilter>;
  value?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type CategorieConnectionEdges = {
  __typename?: 'CategorieConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Categorie>;
};

export type CategorieConnection = Connection & {
  __typename?: 'CategorieConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CategorieConnectionEdges>>>;
};

export type RealisationCategorie = Categorie;

export type RealisationGallery = {
  __typename?: 'RealisationGallery';
  image?: Maybe<Scalars['String']['output']>;
  caption?: Maybe<Scalars['String']['output']>;
};

export type Realisation = Node & Document & {
  __typename?: 'Realisation';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  categorie?: Maybe<RealisationCategorie>;
  lieu?: Maybe<Scalars['String']['output']>;
  client?: Maybe<Scalars['String']['output']>;
  excerpt?: Maybe<Scalars['String']['output']>;
  featured_image?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  surface?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  gallery?: Maybe<Array<Maybe<RealisationGallery>>>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  published: Scalars['Boolean']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RealisationCategorieFilter = {
  categorie?: InputMaybe<CategorieFilter>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RealisationGalleryFilter = {
  image?: InputMaybe<ImageFilter>;
  caption?: InputMaybe<StringFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RealisationFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  categorie?: InputMaybe<RealisationCategorieFilter>;
  lieu?: InputMaybe<StringFilter>;
  client?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  featured_image?: InputMaybe<ImageFilter>;
  location?: InputMaybe<StringFilter>;
  surface?: InputMaybe<StringFilter>;
  duration?: InputMaybe<StringFilter>;
  gallery?: InputMaybe<RealisationGalleryFilter>;
  featured?: InputMaybe<BooleanFilter>;
  published?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type RealisationConnectionEdges = {
  __typename?: 'RealisationConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Realisation>;
};

export type RealisationConnection = Connection & {
  __typename?: 'RealisationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<RealisationConnectionEdges>>>;
};

export type ServiceFeatures = {
  __typename?: 'ServiceFeatures';
  feature?: Maybe<Scalars['String']['output']>;
};

export type Service = Node & Document & {
  __typename?: 'Service';
  title: Scalars['String']['output'];
  excerpt?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  price_range?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['String']['output']>;
  features?: Maybe<Array<Maybe<ServiceFeatures>>>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  published: Scalars['Boolean']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ServiceFeaturesFilter = {
  feature?: InputMaybe<StringFilter>;
};

export type ServiceFilter = {
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  icon?: InputMaybe<ImageFilter>;
  price_range?: InputMaybe<StringFilter>;
  duration?: InputMaybe<StringFilter>;
  features?: InputMaybe<ServiceFeaturesFilter>;
  featured?: InputMaybe<BooleanFilter>;
  published?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ServiceConnectionEdges = {
  __typename?: 'ServiceConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Service>;
};

export type ServiceConnection = Connection & {
  __typename?: 'ServiceConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ServiceConnectionEdges>>>;
};

export type ConfigContact = {
  __typename?: 'ConfigContact';
  phone: Scalars['String']['output'];
  email: Scalars['String']['output'];
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  postal_code?: Maybe<Scalars['String']['output']>;
};

export type ConfigBusinessHoraires = {
  __typename?: 'ConfigBusinessHoraires';
  lundi_vendredi?: Maybe<Scalars['String']['output']>;
  samedi?: Maybe<Scalars['String']['output']>;
  dimanche?: Maybe<Scalars['String']['output']>;
};

export type ConfigBusiness = {
  __typename?: 'ConfigBusiness';
  siret?: Maybe<Scalars['String']['output']>;
  insurance?: Maybe<Scalars['String']['output']>;
  zone_intervention?: Maybe<Scalars['String']['output']>;
  horaires?: Maybe<ConfigBusinessHoraires>;
};

export type ConfigSocial = {
  __typename?: 'ConfigSocial';
  facebook?: Maybe<Scalars['String']['output']>;
  instagram?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
};

export type Config = Node & Document & {
  __typename?: 'Config';
  company_name: Scalars['String']['output'];
  tagline?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  hero_image?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<ConfigContact>;
  business?: Maybe<ConfigBusiness>;
  social?: Maybe<ConfigSocial>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ConfigContactFilter = {
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  city?: InputMaybe<StringFilter>;
  postal_code?: InputMaybe<StringFilter>;
};

export type ConfigBusinessHorairesFilter = {
  lundi_vendredi?: InputMaybe<StringFilter>;
  samedi?: InputMaybe<StringFilter>;
  dimanche?: InputMaybe<StringFilter>;
};

export type ConfigBusinessFilter = {
  siret?: InputMaybe<StringFilter>;
  insurance?: InputMaybe<StringFilter>;
  zone_intervention?: InputMaybe<StringFilter>;
  horaires?: InputMaybe<ConfigBusinessHorairesFilter>;
};

export type ConfigSocialFilter = {
  facebook?: InputMaybe<StringFilter>;
  instagram?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
};

export type ConfigFilter = {
  company_name?: InputMaybe<StringFilter>;
  tagline?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  hero_image?: InputMaybe<ImageFilter>;
  contact?: InputMaybe<ConfigContactFilter>;
  business?: InputMaybe<ConfigBusinessFilter>;
  social?: InputMaybe<ConfigSocialFilter>;
};

export type ConfigConnectionEdges = {
  __typename?: 'ConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Config>;
};

export type ConfigConnection = Connection & {
  __typename?: 'ConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ConfigConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateCategorie: Categorie;
  createCategorie: Categorie;
  updateRealisation: Realisation;
  createRealisation: Realisation;
  updateService: Service;
  createService: Service;
  updateConfig: Config;
  createConfig: Config;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateCategorieArgs = {
  relativePath: Scalars['String']['input'];
  params: CategorieMutation;
};


export type MutationCreateCategorieArgs = {
  relativePath: Scalars['String']['input'];
  params: CategorieMutation;
};


export type MutationUpdateRealisationArgs = {
  relativePath: Scalars['String']['input'];
  params: RealisationMutation;
};


export type MutationCreateRealisationArgs = {
  relativePath: Scalars['String']['input'];
  params: RealisationMutation;
};


export type MutationUpdateServiceArgs = {
  relativePath: Scalars['String']['input'];
  params: ServiceMutation;
};


export type MutationCreateServiceArgs = {
  relativePath: Scalars['String']['input'];
  params: ServiceMutation;
};


export type MutationUpdateConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: ConfigMutation;
};


export type MutationCreateConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: ConfigMutation;
};

export type DocumentUpdateMutation = {
  categorie?: InputMaybe<CategorieMutation>;
  realisation?: InputMaybe<RealisationMutation>;
  service?: InputMaybe<ServiceMutation>;
  config?: InputMaybe<ConfigMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  categorie?: InputMaybe<CategorieMutation>;
  realisation?: InputMaybe<RealisationMutation>;
  service?: InputMaybe<ServiceMutation>;
  config?: InputMaybe<ConfigMutation>;
};

export type CategorieMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type RealisationGalleryMutation = {
  image?: InputMaybe<Scalars['String']['input']>;
  caption?: InputMaybe<Scalars['String']['input']>;
};

export type RealisationMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  categorie?: InputMaybe<Scalars['String']['input']>;
  lieu?: InputMaybe<Scalars['String']['input']>;
  client?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  featured_image?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  surface?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  gallery?: InputMaybe<Array<InputMaybe<RealisationGalleryMutation>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ServiceFeaturesMutation = {
  feature?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  price_range?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  features?: InputMaybe<Array<InputMaybe<ServiceFeaturesMutation>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ConfigContactMutation = {
  phone?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  postal_code?: InputMaybe<Scalars['String']['input']>;
};

export type ConfigBusinessHorairesMutation = {
  lundi_vendredi?: InputMaybe<Scalars['String']['input']>;
  samedi?: InputMaybe<Scalars['String']['input']>;
  dimanche?: InputMaybe<Scalars['String']['input']>;
};

export type ConfigBusinessMutation = {
  siret?: InputMaybe<Scalars['String']['input']>;
  insurance?: InputMaybe<Scalars['String']['input']>;
  zone_intervention?: InputMaybe<Scalars['String']['input']>;
  horaires?: InputMaybe<ConfigBusinessHorairesMutation>;
};

export type ConfigSocialMutation = {
  facebook?: InputMaybe<Scalars['String']['input']>;
  instagram?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
};

export type ConfigMutation = {
  company_name?: InputMaybe<Scalars['String']['input']>;
  tagline?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  hero_image?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<ConfigContactMutation>;
  business?: InputMaybe<ConfigBusinessMutation>;
  social?: InputMaybe<ConfigSocialMutation>;
};

export type CategoriePartsFragment = { __typename: 'Categorie', label: string, value: string, title?: string | null, description?: string | null };

export type RealisationPartsFragment = { __typename: 'Realisation', title: string, date: string, lieu?: string | null, client?: string | null, excerpt?: string | null, featured_image?: string | null, location?: string | null, surface?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, categorie?: { __typename: 'Categorie', label: string, value: string, title?: string | null, description?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null, gallery?: Array<{ __typename: 'RealisationGallery', image?: string | null, caption?: string | null } | null> | null };

export type ServicePartsFragment = { __typename: 'Service', title: string, excerpt?: string | null, icon?: string | null, price_range?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, features?: Array<{ __typename: 'ServiceFeatures', feature?: string | null } | null> | null };

export type ConfigPartsFragment = { __typename: 'Config', company_name: string, tagline?: string | null, description?: string | null, hero_image?: string | null, contact?: { __typename: 'ConfigContact', phone: string, email: string, address?: string | null, city?: string | null, postal_code?: string | null } | null, business?: { __typename: 'ConfigBusiness', siret?: string | null, insurance?: string | null, zone_intervention?: string | null, horaires?: { __typename: 'ConfigBusinessHoraires', lundi_vendredi?: string | null, samedi?: string | null, dimanche?: string | null } | null } | null, social?: { __typename: 'ConfigSocial', facebook?: string | null, instagram?: string | null, linkedin?: string | null } | null };

export type CategorieQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CategorieQuery = { __typename?: 'Query', categorie: { __typename: 'Categorie', id: string, label: string, value: string, title?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type CategorieConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategorieFilter>;
}>;


export type CategorieConnectionQuery = { __typename?: 'Query', categorieConnection: { __typename?: 'CategorieConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CategorieConnectionEdges', cursor: string, node?: { __typename: 'Categorie', id: string, label: string, value: string, title?: string | null, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type RealisationQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type RealisationQuery = { __typename?: 'Query', realisation: { __typename: 'Realisation', id: string, title: string, date: string, lieu?: string | null, client?: string | null, excerpt?: string | null, featured_image?: string | null, location?: string | null, surface?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, categorie?: { __typename: 'Categorie', label: string, value: string, title?: string | null, description?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null, gallery?: Array<{ __typename: 'RealisationGallery', image?: string | null, caption?: string | null } | null> | null } };

export type RealisationConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<RealisationFilter>;
}>;


export type RealisationConnectionQuery = { __typename?: 'Query', realisationConnection: { __typename?: 'RealisationConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'RealisationConnectionEdges', cursor: string, node?: { __typename: 'Realisation', id: string, title: string, date: string, lieu?: string | null, client?: string | null, excerpt?: string | null, featured_image?: string | null, location?: string | null, surface?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, categorie?: { __typename: 'Categorie', label: string, value: string, title?: string | null, description?: string | null, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null, gallery?: Array<{ __typename: 'RealisationGallery', image?: string | null, caption?: string | null } | null> | null } | null } | null> | null } };

export type ServiceQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ServiceQuery = { __typename?: 'Query', service: { __typename: 'Service', id: string, title: string, excerpt?: string | null, icon?: string | null, price_range?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: Array<{ __typename: 'ServiceFeatures', feature?: string | null } | null> | null } };

export type ServiceConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServiceFilter>;
}>;


export type ServiceConnectionQuery = { __typename?: 'Query', serviceConnection: { __typename?: 'ServiceConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ServiceConnectionEdges', cursor: string, node?: { __typename: 'Service', id: string, title: string, excerpt?: string | null, icon?: string | null, price_range?: string | null, duration?: string | null, featured?: boolean | null, published: boolean, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, features?: Array<{ __typename: 'ServiceFeatures', feature?: string | null } | null> | null } | null } | null> | null } };

export type ConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ConfigQuery = { __typename?: 'Query', config: { __typename: 'Config', id: string, company_name: string, tagline?: string | null, description?: string | null, hero_image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'ConfigContact', phone: string, email: string, address?: string | null, city?: string | null, postal_code?: string | null } | null, business?: { __typename: 'ConfigBusiness', siret?: string | null, insurance?: string | null, zone_intervention?: string | null, horaires?: { __typename: 'ConfigBusinessHoraires', lundi_vendredi?: string | null, samedi?: string | null, dimanche?: string | null } | null } | null, social?: { __typename: 'ConfigSocial', facebook?: string | null, instagram?: string | null, linkedin?: string | null } | null } };

export type ConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConfigFilter>;
}>;


export type ConfigConnectionQuery = { __typename?: 'Query', configConnection: { __typename?: 'ConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ConfigConnectionEdges', cursor: string, node?: { __typename: 'Config', id: string, company_name: string, tagline?: string | null, description?: string | null, hero_image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'ConfigContact', phone: string, email: string, address?: string | null, city?: string | null, postal_code?: string | null } | null, business?: { __typename: 'ConfigBusiness', siret?: string | null, insurance?: string | null, zone_intervention?: string | null, horaires?: { __typename: 'ConfigBusinessHoraires', lundi_vendredi?: string | null, samedi?: string | null, dimanche?: string | null } | null } | null, social?: { __typename: 'ConfigSocial', facebook?: string | null, instagram?: string | null, linkedin?: string | null } | null } | null } | null> | null } };

export const CategoriePartsFragmentDoc = gql`
    fragment CategorieParts on Categorie {
  __typename
  label
  value
  title
  description
}
    `;
export const RealisationPartsFragmentDoc = gql`
    fragment RealisationParts on Realisation {
  __typename
  title
  date
  categorie {
    ... on Categorie {
      __typename
      label
      value
      title
      description
    }
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
  }
  lieu
  client
  excerpt
  featured_image
  location
  surface
  duration
  gallery {
    __typename
    image
    caption
  }
  featured
  published
  body
}
    `;
export const ServicePartsFragmentDoc = gql`
    fragment ServiceParts on Service {
  __typename
  title
  excerpt
  icon
  price_range
  duration
  features {
    __typename
    feature
  }
  featured
  published
  body
}
    `;
export const ConfigPartsFragmentDoc = gql`
    fragment ConfigParts on Config {
  __typename
  company_name
  tagline
  description
  hero_image
  contact {
    __typename
    phone
    email
    address
    city
    postal_code
  }
  business {
    __typename
    siret
    insurance
    zone_intervention
    horaires {
      __typename
      lundi_vendredi
      samedi
      dimanche
    }
  }
  social {
    __typename
    facebook
    instagram
    linkedin
  }
}
    `;
export const CategorieDocument = gql`
    query categorie($relativePath: String!) {
  categorie(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CategorieParts
  }
}
    ${CategoriePartsFragmentDoc}`;
export const CategorieConnectionDocument = gql`
    query categorieConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CategorieFilter) {
  categorieConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CategorieParts
      }
    }
  }
}
    ${CategoriePartsFragmentDoc}`;
export const RealisationDocument = gql`
    query realisation($relativePath: String!) {
  realisation(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...RealisationParts
  }
}
    ${RealisationPartsFragmentDoc}`;
export const RealisationConnectionDocument = gql`
    query realisationConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: RealisationFilter) {
  realisationConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...RealisationParts
      }
    }
  }
}
    ${RealisationPartsFragmentDoc}`;
export const ServiceDocument = gql`
    query service($relativePath: String!) {
  service(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ServiceParts
  }
}
    ${ServicePartsFragmentDoc}`;
export const ServiceConnectionDocument = gql`
    query serviceConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ServiceFilter) {
  serviceConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ServiceParts
      }
    }
  }
}
    ${ServicePartsFragmentDoc}`;
export const ConfigDocument = gql`
    query config($relativePath: String!) {
  config(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ConfigParts
  }
}
    ${ConfigPartsFragmentDoc}`;
export const ConfigConnectionDocument = gql`
    query configConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ConfigFilter) {
  configConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ConfigParts
      }
    }
  }
}
    ${ConfigPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      categorie(variables: CategorieQueryVariables, options?: C): Promise<{data: CategorieQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategorieQueryVariables, query: string}> {
        return requester<{data: CategorieQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategorieQueryVariables, query: string}, CategorieQueryVariables>(CategorieDocument, variables, options);
      },
    categorieConnection(variables?: CategorieConnectionQueryVariables, options?: C): Promise<{data: CategorieConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategorieConnectionQueryVariables, query: string}> {
        return requester<{data: CategorieConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategorieConnectionQueryVariables, query: string}, CategorieConnectionQueryVariables>(CategorieConnectionDocument, variables, options);
      },
    realisation(variables: RealisationQueryVariables, options?: C): Promise<{data: RealisationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealisationQueryVariables, query: string}> {
        return requester<{data: RealisationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealisationQueryVariables, query: string}, RealisationQueryVariables>(RealisationDocument, variables, options);
      },
    realisationConnection(variables?: RealisationConnectionQueryVariables, options?: C): Promise<{data: RealisationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealisationConnectionQueryVariables, query: string}> {
        return requester<{data: RealisationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: RealisationConnectionQueryVariables, query: string}, RealisationConnectionQueryVariables>(RealisationConnectionDocument, variables, options);
      },
    service(variables: ServiceQueryVariables, options?: C): Promise<{data: ServiceQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceQueryVariables, query: string}> {
        return requester<{data: ServiceQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceQueryVariables, query: string}, ServiceQueryVariables>(ServiceDocument, variables, options);
      },
    serviceConnection(variables?: ServiceConnectionQueryVariables, options?: C): Promise<{data: ServiceConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceConnectionQueryVariables, query: string}> {
        return requester<{data: ServiceConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServiceConnectionQueryVariables, query: string}, ServiceConnectionQueryVariables>(ServiceConnectionDocument, variables, options);
      },
    config(variables: ConfigQueryVariables, options?: C): Promise<{data: ConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigQueryVariables, query: string}> {
        return requester<{data: ConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigQueryVariables, query: string}, ConfigQueryVariables>(ConfigDocument, variables, options);
      },
    configConnection(variables?: ConfigConnectionQueryVariables, options?: C): Promise<{data: ConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigConnectionQueryVariables, query: string}> {
        return requester<{data: ConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigConnectionQueryVariables, query: string}, ConfigConnectionQueryVariables>(ConfigConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  