# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  categorie(relativePath: String): Categorie!
  categorieConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategorieFilter): CategorieConnection!
  realisation(relativePath: String): Realisation!
  realisationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: RealisationFilter): RealisationConnection!
  service(relativePath: String): Service!
  serviceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServiceFilter): ServiceConnection!
  config(relativePath: String): Config!
  configConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ConfigFilter): ConfigConnection!
}

input DocumentFilter {
  categorie: CategorieFilter
  realisation: RealisationFilter
  service: ServiceFilter
  config: ConfigFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Categorie | Realisation | Service | Config | Folder

type Categorie implements Node & Document {
  label: String!
  value: String!
  title: String
  description: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input CategorieFilter {
  label: StringFilter
  value: StringFilter
  title: StringFilter
  description: StringFilter
}

type CategorieConnectionEdges {
  cursor: String!
  node: Categorie
}

type CategorieConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategorieConnectionEdges]
}

union RealisationCategorie = Categorie

type RealisationGallery {
  image: String
  caption: String
}

type Realisation implements Node & Document {
  title: String!
  date: String!
  categorie: RealisationCategorie
  lieu: String
  client: String
  excerpt: String
  featured_image: String
  location: String
  surface: String
  duration: String
  gallery: [RealisationGallery]
  featured: Boolean
  published: Boolean!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RealisationCategorieFilter {
  categorie: CategorieFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RealisationGalleryFilter {
  image: ImageFilter
  caption: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input RealisationFilter {
  title: StringFilter
  date: DatetimeFilter
  categorie: RealisationCategorieFilter
  lieu: StringFilter
  client: StringFilter
  excerpt: StringFilter
  featured_image: ImageFilter
  location: StringFilter
  surface: StringFilter
  duration: StringFilter
  gallery: RealisationGalleryFilter
  featured: BooleanFilter
  published: BooleanFilter
  body: RichTextFilter
}

type RealisationConnectionEdges {
  cursor: String!
  node: Realisation
}

type RealisationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [RealisationConnectionEdges]
}

type ServiceFeatures {
  feature: String
}

type Service implements Node & Document {
  title: String!
  excerpt: String
  icon: String
  price_range: String
  duration: String
  features: [ServiceFeatures]
  featured: Boolean
  published: Boolean!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServiceFeaturesFilter {
  feature: StringFilter
}

input ServiceFilter {
  title: StringFilter
  excerpt: StringFilter
  icon: ImageFilter
  price_range: StringFilter
  duration: StringFilter
  features: ServiceFeaturesFilter
  featured: BooleanFilter
  published: BooleanFilter
  body: RichTextFilter
}

type ServiceConnectionEdges {
  cursor: String!
  node: Service
}

type ServiceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServiceConnectionEdges]
}

type ConfigContact {
  phone: String!
  email: String!
  address: String
  city: String
  postal_code: String
}

type ConfigBusinessHoraires {
  lundi_vendredi: String
  samedi: String
  dimanche: String
}

type ConfigBusiness {
  siret: String
  insurance: String
  zone_intervention: String
  horaires: ConfigBusinessHoraires
}

type ConfigSocial {
  facebook: String
  instagram: String
  linkedin: String
}

type Config implements Node & Document {
  company_name: String!
  tagline: String
  description: String
  hero_image: String
  contact: ConfigContact
  business: ConfigBusiness
  social: ConfigSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ConfigContactFilter {
  phone: StringFilter
  email: StringFilter
  address: StringFilter
  city: StringFilter
  postal_code: StringFilter
}

input ConfigBusinessHorairesFilter {
  lundi_vendredi: StringFilter
  samedi: StringFilter
  dimanche: StringFilter
}

input ConfigBusinessFilter {
  siret: StringFilter
  insurance: StringFilter
  zone_intervention: StringFilter
  horaires: ConfigBusinessHorairesFilter
}

input ConfigSocialFilter {
  facebook: StringFilter
  instagram: StringFilter
  linkedin: StringFilter
}

input ConfigFilter {
  company_name: StringFilter
  tagline: StringFilter
  description: StringFilter
  hero_image: ImageFilter
  contact: ConfigContactFilter
  business: ConfigBusinessFilter
  social: ConfigSocialFilter
}

type ConfigConnectionEdges {
  cursor: String!
  node: Config
}

type ConfigConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ConfigConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateCategorie(relativePath: String!, params: CategorieMutation!): Categorie!
  createCategorie(relativePath: String!, params: CategorieMutation!): Categorie!
  updateRealisation(relativePath: String!, params: RealisationMutation!): Realisation!
  createRealisation(relativePath: String!, params: RealisationMutation!): Realisation!
  updateService(relativePath: String!, params: ServiceMutation!): Service!
  createService(relativePath: String!, params: ServiceMutation!): Service!
  updateConfig(relativePath: String!, params: ConfigMutation!): Config!
  createConfig(relativePath: String!, params: ConfigMutation!): Config!
}

input DocumentUpdateMutation {
  categorie: CategorieMutation
  realisation: RealisationMutation
  service: ServiceMutation
  config: ConfigMutation
  relativePath: String
}

input DocumentMutation {
  categorie: CategorieMutation
  realisation: RealisationMutation
  service: ServiceMutation
  config: ConfigMutation
}

input CategorieMutation {
  label: String
  value: String
  title: String
  description: String
}

input RealisationGalleryMutation {
  image: String
  caption: String
}

input RealisationMutation {
  title: String
  date: String
  categorie: String
  lieu: String
  client: String
  excerpt: String
  featured_image: String
  location: String
  surface: String
  duration: String
  gallery: [RealisationGalleryMutation]
  featured: Boolean
  published: Boolean
  body: JSON
}

input ServiceFeaturesMutation {
  feature: String
}

input ServiceMutation {
  title: String
  excerpt: String
  icon: String
  price_range: String
  duration: String
  features: [ServiceFeaturesMutation]
  featured: Boolean
  published: Boolean
  body: JSON
}

input ConfigContactMutation {
  phone: String
  email: String
  address: String
  city: String
  postal_code: String
}

input ConfigBusinessHorairesMutation {
  lundi_vendredi: String
  samedi: String
  dimanche: String
}

input ConfigBusinessMutation {
  siret: String
  insurance: String
  zone_intervention: String
  horaires: ConfigBusinessHorairesMutation
}

input ConfigSocialMutation {
  facebook: String
  instagram: String
  linkedin: String
}

input ConfigMutation {
  company_name: String
  tagline: String
  description: String
  hero_image: String
  contact: ConfigContactMutation
  business: ConfigBusinessMutation
  social: ConfigSocialMutation
}

schema {
  query: Query
  mutation: Mutation
}
