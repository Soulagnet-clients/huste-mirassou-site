import { test, expect } from '@playwright/test';

test.describe('Debug - Probl√®mes r√©els du site', () => {
  
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    await page.waitForTimeout(3000); // Attendre le chargement
  });

  test('V√©rifier l\'image de fond Hero', async ({ page }) => {
    console.log('üîç Test de l\'image de fond Hero');
    
    // V√©rifier si l'image de fond est d√©finie
    const heroSection = page.locator('#accueil');
    
    // V√©rifier les styles CSS de l'image de fond
    const backgroundImage = await heroSection.evaluate((el) => {
      const heroDiv = el.querySelector('div[style*="backgroundImage"]');
      if (heroDiv) {
        return window.getComputedStyle(heroDiv).backgroundImage;
      }
      return 'none';
    });
    
    console.log(`üì∏ Image de fond d√©tect√©e: ${backgroundImage}`);
    
    if (backgroundImage === 'none') {
      console.log('‚ùå Aucune image de fond d√©tect√©e');
      
      // V√©rifier si c'est le placeholder qui s'affiche
      const placeholder = heroSection.locator('text=Image de chantier √† ajouter');
      if (await placeholder.count() > 0) {
        console.log('üîß Placeholder affich√© - image manquante');
        await expect(placeholder).toBeVisible();
      }
    } else {
      console.log('‚úÖ Image de fond trouv√©e');
      expect(backgroundImage).not.toBe('none');
    }
  });

  test('V√©rifier les donn√©es TinaCMS charg√©es', async ({ page }) => {
    console.log('üîç Test du chargement des donn√©es TinaCMS');
    
    // Attendre plus longtemps pour le chargement des donn√©es
    await page.waitForTimeout(5000);
    
    // V√©rifier les donn√©es de l'entreprise
    const companyName = await page.locator('h1').textContent();
    console.log(`üè¢ Nom entreprise: ${companyName}`);
    
    // V√©rifier les services
    const serviceCards = page.locator('#services .bg-white.rounded-lg.shadow-lg');
    const serviceCount = await serviceCards.count();
    console.log(`üõ†Ô∏è Nombre de services: ${serviceCount}`);
    
    if (serviceCount === 0) {
      console.log('‚ùå Aucun service charg√©');
      
      // V√©rifier s'il y a un message de chargement
      const loadingMessage = page.locator('text=Chargement des services');
      if (await loadingMessage.count() > 0) {
        console.log('‚è≥ Message de chargement encore affich√©');
      }
    } else {
      // Lister les services trouv√©s
      const serviceTitles = await serviceCards.locator('h3').allTextContents();
      console.log(`üìã Services trouv√©s: ${serviceTitles.join(', ')}`);
    }
    
    // V√©rifier les r√©alisations
    const realisationCards = page.locator('#realisations .bg-white.rounded-lg.shadow-lg');
    const realisationCount = await realisationCards.count();
    console.log(`üèóÔ∏è Nombre de r√©alisations: ${realisationCount}`);
    
    if (realisationCount > 0) {
      const realisationTitles = await realisationCards.locator('h3').allTextContents();
      console.log(`üìã R√©alisations trouv√©es: ${realisationTitles.join(', ')}`);
    }
  });

  test('V√©rifier les erreurs JavaScript', async ({ page }) => {
    console.log('üîç Test des erreurs JavaScript');
    
    const errors: string[] = [];
    const warnings: string[] = [];
    
    // Capturer les erreurs et warnings
    page.on('pageerror', error => {
      errors.push(error.message);
      console.log(`‚ùå Erreur JS: ${error.message}`);
    });
    
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
        console.log(`‚ùå Console Error: ${msg.text()}`);
      } else if (msg.type() === 'warning') {
        warnings.push(msg.text());
        console.log(`‚ö†Ô∏è Console Warning: ${msg.text()}`);
      }
    });
    
    // Naviguer dans le site pour d√©clencher les erreurs
    await page.click('text=Services');
    await page.waitForTimeout(1000);
    
    await page.click('text=R√©alisations');
    await page.waitForTimeout(1000);
    
    await page.click('text=Devis');
    await page.waitForTimeout(1000);
    
    // Essayer de remplir le formulaire
    const devisSection = page.locator('#devis');
    await devisSection.locator('input[name="name"]').fill('Test');
    await devisSection.locator('input[name="email"]').fill('test@test.com');
    
    console.log(`üìä Total erreurs: ${errors.length}`);
    console.log(`üìä Total warnings: ${warnings.length}`);
    
    // Afficher les erreurs uniques
    const uniqueErrors = [...new Set(errors)];
    uniqueErrors.forEach(error => console.log(`üî¥ ${error}`));
    
    // Le test √©choue s'il y a des erreurs critiques
    const criticalErrors = errors.filter(error => 
      !error.includes('Warning') && 
      !error.includes('fetch') &&
      !error.includes('Failed to load resource')
    );
    
    expect(criticalErrors.length).toBe(0);
  });

  test('V√©rifier les requ√™tes r√©seau', async ({ page }) => {
    console.log('üîç Test des requ√™tes r√©seau');
    
    const requests: any[] = [];
    const responses: any[] = [];
    
    // Capturer les requ√™tes et r√©ponses
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method()
      });
    });
    
    page.on('response', response => {
      responses.push({
        url: response.url(),
        status: response.status(),
        statusText: response.statusText()
      });
    });
    
    await page.reload();
    await page.waitForLoadState('networkidle');
    
    console.log(`üì° Requ√™tes totales: ${requests.length}`);
    console.log(`üì° R√©ponses totales: ${responses.length}`);
    
    // V√©rifier les erreurs 404, 500, etc.
    const errorResponses = responses.filter(r => r.status >= 400);
    console.log(`‚ùå R√©ponses en erreur: ${errorResponses.length}`);
    
    errorResponses.forEach(error => {
      console.log(`üî¥ ${error.status} ${error.statusText}: ${error.url}`);
    });
    
    // V√©rifier les requ√™tes vers TinaCMS/GraphQL
    const graphqlRequests = requests.filter(r => r.url.includes('graphql'));
    console.log(`üîó Requ√™tes GraphQL: ${graphqlRequests.length}`);
    
    const tinaRequests = requests.filter(r => r.url.includes('4001'));
    console.log(`üîó Requ√™tes vers TinaCMS: ${tinaRequests.length}`);
    
    // Le test √©choue s'il y a trop d'erreurs r√©seau
    expect(errorResponses.length).toBeLessThan(5);
  });

  test('V√©rifier la configuration TinaCMS', async ({ page }) => {
    console.log('üîç Test de la configuration TinaCMS');
    
    // V√©rifier que les fichiers de configuration existent
    const configFiles = [
      '/content/config/entreprise.json',
      '/content/services/terrasses.mdx',
      '/content/services/maconnerie.mdx'
    ];
    
    for (const file of configFiles) {
      const response = await page.request.get(`http://localhost:3000${file}`);
      console.log(`üìÑ ${file}: ${response.status()}`);
      
      if (response.status() === 200) {
        console.log(`‚úÖ ${file} accessible`);
      } else {
        console.log(`‚ùå ${file} non accessible (${response.status()})`);
      }
    }
    
    // V√©rifier l'API GraphQL
    try {
      const graphqlResponse = await page.request.post('http://localhost:4001/graphql', {
        data: {
          query: '{ __schema { types { name } } }'
        }
      });
      
      console.log(`üîó API GraphQL: ${graphqlResponse.status()}`);
      
      if (graphqlResponse.status() === 200) {
        console.log('‚úÖ API GraphQL accessible');
      } else {
        console.log('‚ùå API GraphQL non accessible');
      }
    } catch (error) {
      console.log(`‚ùå Erreur API GraphQL: ${error}`);
    }
  });

  test('V√©rifier les collections TinaCMS utilis√©es', async ({ page }) => {
    console.log('üîç Test des collections TinaCMS');
    
    // Aller sur l'admin TinaCMS
    await page.goto('/admin/index.html');
    await page.waitForTimeout(5000);
    
    const pageContent = await page.content();
    
    // V√©rifier si TinaCMS se charge
    if (pageContent.includes('TinaCMS') || pageContent.includes('tina')) {
      console.log('‚úÖ Interface TinaCMS charg√©e');
    } else {
      console.log('‚ùå Interface TinaCMS non charg√©e');
    }
    
    // V√©rifier les collections mentionn√©es
    const collections = ['Configuration', 'Services', 'R√©alisations', 'Pages'];
    
    for (const collection of collections) {
      if (pageContent.includes(collection)) {
        console.log(`‚úÖ Collection "${collection}" trouv√©e`);
      } else {
        console.log(`‚ùå Collection "${collection}" non trouv√©e`);
      }
    }
    
    // La collection Pages ne devrait plus exister
    expect(pageContent.includes('Pages')).toBeFalsy();
  });
});
